load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections 1024;  # Adjust the number as needed
}

http {
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    lua_shared_dict script_cache 10m;
    lua_shared_dict oas_cache 50m;
    lua_shared_dict script_mapping 1m;  # Reserve 1MB for script mappings
    lua_package_path "/etc/nginx/lua-scripts/db_scripts/?.lua;/etc/nginx/lua-scripts/generated/?.lua;/etc/nginx/lua-scripts/function_scripts/?.lua;/etc/nginx/lua-scripts/script_service/?.lua;/usr/local/openresty/lualib/?.lua;;";

    log_format timing_log '[___time_local] | Request: "___request" | '
                        'Status: ___status | Size: ___body_bytes_sent | '
                        'Request Time: ___request_time | Response Time: ___upstream_response_time ___pipe';

    access_log /var/log/nginx/timing.log timing_log;

    upstream fe_catalog {
        server local.sera:${FE_CATALOG_PORT};
    }

    upstream be_builder {
        server local.sera:${BE_BUILDER_PORT};
    }

    upstream be_sequencer {
        server local.sera:${BE_SEQUENCER_PORT};
    }

    upstream be_socket {
        server local.sera:${BE_SOCKET_PORT};
    }

    # Map the x_sera_service header to determine the target service
    map ___http_x_sera_service ___route {
        default "be_sequencer";  # Default to sequencer for any other traffic
        be_builder "be_builder";
        be_nginx "be_nginx";
    }

    # Map the port to a specific service
    map ___server_port ___target {
        default "be_sequencer";
        "${BE_ROUTER_PORT}" "https://fe_catalog";
    }

    server {
        listen 80;
        listen [::]:80;
        listen 443 ssl;
        listen [::]:443 ssl;
        listen ${BE_ROUTER_PORT} ssl;
        listen [::]:${BE_ROUTER_PORT} ssl;

        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;


        server_name localhost:${BE_ROUTER_PORT} local.sera:${BE_ROUTER_PORT} ${DOMAIN_NAME}:${BE_ROUTER_PORT};

        location / {
            set_by_lua ___nginx_start_time 'return ngx.now()';
            set_by_lua ___lua_start_time '';
            set_by_lua ___proxy_script_start_time '';
            set_by_lua ___proxy_start_time '';
            set_by_lua ___proxy_finish_time '';
            # Set the fallback target using the map directive
            if (___route = "be_builder") {
                set ___target "http://be_builder";
            }

            if (___server_port != 12000) {
                access_by_lua_file /etc/nginx/lua-scripts/script_service/dispatcher.lua;
            }

            proxy_pass ___target;

            # Support WebSocket connections
            proxy_http_version 1.1;
            proxy_set_header Upgrade ___http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Host ___host;
            proxy_set_header X-Real-IP ___remote_addr;
            proxy_set_header X-Forwarded-For ___proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ___scheme;
        }

        location /update-map {
            default_type 'application/json';
            client_max_body_size 10k;  # Limit the size of the incoming requests

                # Restrict access to local IP addresses
            allow 127.0.0.1;  # Allow localhost for IPv4
            allow ::1;        # Allow localhost for IPv6
            deny all;         # Deny all other IP addresses


            if (___route = "be_nginx") {
                access_by_lua_block {
                    local script_map_update_service = require "update_script_map"
                    script_map_update_service.update_script_map()
                }
            }
        }

        location /sera-socket-io {
            proxy_pass "http://be_socket";

            # Support WebSocket connections
            proxy_http_version 1.1;
            proxy_set_header Upgrade ___http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Host ___host;
            proxy_set_header X-Real-IP ___remote_addr;
            proxy_set_header X-Forwarded-For ___proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ___scheme;
        }

        location /sera-test-endpoint {
            add_header Content-Type "application/json" always;
            return 200 '{"style":"gangnam style!"}';
        }

        location /nginx_status {
            stub_status;
            allow 127.0.0.1;  # Only allow requests from localhost
            deny all;         # Deny all other requests
        }
    }
}

