load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections 1024;  # Adjust the number as needed
}

http {
    lua_shared_dict script_cache 10m;
    lua_shared_dict script_mapping 1m;  # Reserve 1MB for script mappings
    lua_package_path "/etc/nginx/lua-scripts/?.lua;/usr/local/openresty/lualib/?.lua;;";

    upstream fe_catalog {
        server local.sera:${FE_CATALOG_PORT};
    }

    upstream be_builder {
        server local.sera:${BE_BUILDER_PORT};
    }

    upstream be_sequencer {
        server local.sera:${BE_SEQUENCER_PORT};
    }

    upstream be_socket {
        server local.sera:${BE_SOCKET_PORT};
    }

    # Map the x_sera_service header to determine the target service
    map ___http_x_sera_service ___route {
        default "be_sequencer";  # Default to sequencer for any other traffic
        be_builder "be_builder";
        be_nginx "be_nginx";
    }

    # Map the port to a specific service
    map ___server_port ___target {
        default "be_sequencer";
        "${BE_ROUTER_PORT}" "https://fe_catalog";
    }

    server {
        listen 80;
        listen [::]:80;
        listen 443 ssl;
        listen [::]:443 ssl;
        listen ${BE_ROUTER_PORT} ssl;
        listen [::]:${BE_ROUTER_PORT} ssl;

        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;


        server_name localhost:${BE_ROUTER_PORT} local.sera:${BE_ROUTER_PORT} ${DOMAIN_NAME}:${BE_ROUTER_PORT};

        location / {
            # Set the fallback target using the map directive
            if (___route = "be_builder") {
                set ___target "http://be_builder";
            }

            if (___server_port != 12000) {

                access_by_lua_file /etc/nginx/lua-scripts/dispatcher.lua;
                # content_by_lua_block {
                #     -- Import the MongoDB handler functions
                #     local mongo_handler = require "mongo_handler"

                #     -- Retrieve and output MongoDB data
                #     local json_result = mongo_handler.get_admin_settings()

                #     ngx.header.content_type = "application/json"
                #     ngx.say(json_result)
                # }
                # 
            }

            proxy_pass ___target;

            # Support WebSocket connections
            proxy_http_version 1.1;
            proxy_set_header Upgrade ___http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Host ___host;
            proxy_set_header X-Real-IP ___remote_addr;
            proxy_set_header X-Forwarded-For ___proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ___scheme;
        }

        location /update-map {
            if (___route = "be_builder" && ___server_port == 12000) {
                add_header Content-Type "application/json" always;
                return 200 '{"nginx":"update"}';
            }
        }

        location /sera-socket-io {
            proxy_pass "http://be_socket";

            # Support WebSocket connections
            proxy_http_version 1.1;
            proxy_set_header Upgrade ___http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Host ___host;
            proxy_set_header X-Real-IP ___remote_addr;
            proxy_set_header X-Forwarded-For ___proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ___scheme;
        }

        location /sera-test-endpoint {
            add_header Content-Type "application/json" always;
            return 200 '{"style":"gangnam style!"}';
        }
    }
}

